"use strict";(self.webpackChunkrojo_space=self.webpackChunkrojo_space||[]).push([[2057],{7596:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>a});var r=s(5893),i=s(1151);const t={title:"Project Format",sidebar_position:4},l=void 0,o={id:"project-format",title:"Project Format",description:"Project File",source:"@site/docs/project-format.md",sourceDirName:".",slug:"/project-format",permalink:"/docs/v7/project-format",draft:!1,unlisted:!1,editUrl:"https://github.com/rojo-rbx/rojo.space/edit/master/docs/project-format.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Project Format",sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Porting an Existing Game",permalink:"/docs/v7/getting-started/existing-game"},next:{title:"Properties",permalink:"/docs/v7/properties"}},c={},a=[{value:"Project File",id:"project-file",level:2},{value:"Instance Description",id:"instance-description",level:2},{value:"Instance Property Value",id:"instance-property-value",level:2},{value:"Example Projects",id:"example-projects",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"project-file",children:"Project File"}),"\n",(0,r.jsxs)(n.p,{children:["Rojo projects are JSON files that have the ",(0,r.jsx)(n.code,{children:".project.json"})," extension. They have the following fields:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"}),": A string indicating the name of the project. This name is used when building the project into a model or place file.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Required"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"tree"}),": An ",(0,r.jsx)(n.a,{href:"#instance-description",children:"Instance Description"})," describing the root instance of the project.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Required"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"servePort"}),": The port that ",(0,r.jsx)(n.code,{children:"rojo serve"})," should listen on. Passing ",(0,r.jsx)(n.code,{children:"--port"})," will override this setting.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"34872"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"servePlaceIds"}),": A list of place IDs that this project may be live-synced to. This feature can help prevent overwriting the wrong game with source from Rojo.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"placeId"}),": Sets the current place's place ID when connecting to the Rojo server from Roblox Studio.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"gameId"}),": Sets the current place's game ID when connecting to the Rojo server from Roblox Studio.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"serveAddress"}),": If specified, this address will be used in place of the default address, as long as --address is unprovided.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"null"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"globIgnorePaths"}),": A list of globs of paths to ignore.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"[]"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"instance-description",children:"Instance Description"}),"\n",(0,r.jsx)(n.p,{children:"Instance Descriptions correspond one-to-one with the actual Roblox Instances in the project."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$className"}),": The ClassName of the Instance being described.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Optional if ",(0,r.jsx)(n.code,{children:"$path"})," is specified or if the instance is a Roblox service."]})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$path"}),": The path on the filesystem to pull files from into the project.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsxs)(n.strong,{children:["Optional if ",(0,r.jsx)(n.code,{children:"$className"})," is specified."]})}),"\n",(0,r.jsx)(n.li,{children:"Paths are relative to the folder containing the project file."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$properties"}),": Properties to apply to the instance. Values should be ",(0,r.jsx)(n.a,{href:"#instance-property-value",children:"Instance Property Values"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$ignoreUnknownInstances"}),": Whether instances that Rojo doesn't know about should be deleted.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Optional"})}),"\n",(0,r.jsxs)(n.li,{children:["Default is ",(0,r.jsx)(n.code,{children:"false"})," if ",(0,r.jsx)(n.code,{children:"$path"})," is specified, otherwise ",(0,r.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"All other fields in an Instance Description are turned into instances whose name is the key. These values should also be Instance Descriptions!"}),"\n",(0,r.jsx)(n.h2,{id:"instance-property-value",children:"Instance Property Value"}),"\n",(0,r.jsxs)(n.p,{children:["There are two kinds of property values on instances, ",(0,r.jsx)(n.strong,{children:"implicit"})," and ",(0,r.jsx)(n.strong,{children:"explicit"}),". An implicit value uses Rojo's knowledge of Roblox's API to infer the correct type, while an explicit value specifies the type directly."]}),"\n",(0,r.jsxs)(n.p,{children:["When a value is specified implicitly, Rojo uses the class name and property name to validate the value. That is, the format of an implicit value must be correct for the type corresponding to the class and property. For example, the ",(0,r.jsx)(n.code,{children:"Anchored"})," property of the ",(0,r.jsx)(n.code,{children:"Part"})," class is known by Rojo to be of the ",(0,r.jsx)(n.a,{href:"../properties#bool",children:"Bool"})," type, so the implicit value must be a boolean:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "$className": "Part",\n    "$properties": {\n        "Anchored": true,\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Conversely, an explicit value specifies the type of the value directly. An explicit value is an object with one field, where:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The key of the field is the ",(0,r.jsx)(n.a,{href:"../properties#property-type-support",children:"type"})," of property to represent."]}),"\n",(0,r.jsx)(n.li,{children:"The value of the field is the value of the property, in the format of the specified type."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For example, the ",(0,r.jsx)(n.code,{children:"Anchored"})," property specified explicitly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "$className": "Part",\n    "$properties": {\n        "Anchored": {\n        \t"Bool": true\n        },\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For explicit values, Rojo ",(0,r.jsx)(n.em,{children:"does not"})," validate the type against Roblox's API. For example, the type of the ",(0,r.jsx)(n.code,{children:"Anchored"})," property could be overridden to be a string instead:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "$className": "Part",\n    "$properties": {\n        "Anchored": {\n        \t"String": "Hello, world!"\n        },\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Explicit values are necessary for properties that Rojo does not know about. This includes properties that have been recently added to Roblox's API, and certain internal properties that aren't described by Roblox's API at all."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"../properties",children:"Properties"})," page describes the formats of each type in detail."]}),"\n",(0,r.jsx)(n.h2,{id:"example-projects",children:"Example Projects"}),"\n",(0,r.jsxs)(n.p,{children:["This project bundles up everything in the ",(0,r.jsx)(n.code,{children:"src"})," directory. It'd be suitable for making a plugin or model:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "AwesomeLibrary",\n  "tree": {\n    "$path": "src"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This project describes the layout you might use if you were making the next hit simulator game, ",(0,r.jsx)(n.em,{children:"Sisyphus Simulator"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "Sisyphus Simulator",\n  "globIgnorePaths": ["**/*.spec.lua"],\n  "tree": {\n    "$className": "DataModel",\n\n    "HttpService": {\n      "$className": "HttpService",\n      "$properties": {\n        "HttpEnabled": true\n      }\n    },\n\n    "ReplicatedStorage": {\n      "$className": "ReplicatedStorage",\n      "$path": "src/ReplicatedStorage"\n    },\n\n    "StarterPlayer": {\n      "$className": "StarterPlayer",\n\n      "StarterPlayerScripts": {\n        "$className": "StarterPlayerScripts",\n        "$path": "src/StarterPlayerScripts"\n      }\n    },\n\n    "Workspace": {\n      "$className": "Workspace",\n      "$properties": {\n        "Gravity": 67.3\n      },\n\n      "Terrain": {\n        "$path": "Terrain.rbxm"\n      }\n    }\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>l});var r=s(7294);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);